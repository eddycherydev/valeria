@section('content')
    
<h1>Lucid ORM</h1>

<p><strong>Lucid</strong> is a lightweight and modern PHP ORM inspired by the best frameworks, designed to be intuitive, powerful, and easy to extend. Lucid is part of the Valeria framework and aims to provide a smooth experience handling databases with clean and organized code.</p>

<section>
  <h2>Features</h2>
  <ul>
    <li><strong>Active Record style:</strong> Define models representing tables and easily manipulate data.</li>
    <li><strong>Powerful Query Builder:</strong> Build SQL queries with chained methods for all kinds of operations.</li>
    <li><strong>Basic Relations:</strong> Supports <code>hasOne</code>, <code>hasMany</code>, and <code>belongsTo</code> relationships.</li>
    <li><strong>CLI Migrations:</strong> Generate migrations to create and modify tables easily.</li>
    <li><strong>Automatic Model Generation:</strong> Create models from the console to speed up development.</li>
    <li><strong>Robust DB Connection:</strong> Configured via <code>.env</code> file.</li>
    <li><strong>PDO Compatible:</strong> Supports multiple engines (MySQL, PostgreSQL, SQLite, etc.).</li>
    <li><strong>Optional Middleware:</strong> Add custom logic before or after DB operations (planned feature).</li>
  </ul>
</section>

<section>
  <h2>Installation and Setup</h2>
  <ol>
    <li>Clone the Valeria repository with Lucid included.</li>
    <li>Configure your <code>.env</code> file in the root with your database connection:</li>
  </ol>
  <pre><code>DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=valeria
DB_USERNAME=root
DB_PASSWORD=secret
</code></pre>
  <ol start="3">
    <li>Run migrations to create tables:</li>
  </ol>
  <pre><code>php mantis migrate
</code></pre>
  <ol start="4">
    <li>Generate a model:</li>
  </ol>
  <pre><code>php mantis make:model User
</code></pre>
</section>

<section>
  <h2>Basic Usage</h2>

  <h3>Define a Model</h3>
  <pre><code>&lt;?php
namespace App\Models;

use Core\Lucid\Model;

class User extends Model
{
    protected string $table = 'users';

    protected array $fillable = ['name', 'email', 'password'];
}
</code></pre>

  <h3>Create a Record</h3>
  <pre><code>$user = new User();
$user->name = 'Jane Doe';
$user->email = 'jane@example.com';
$user->password = password_hash('123456', PASSWORD_DEFAULT);
$user->save();
</code></pre>

  <h3>Query Records</h3>
  <pre><code>$users = User::where('email', 'like', '%@example.com')->get();

foreach ($users as $user) {
    echo $user->name . PHP_EOL;
}
</code></pre>

  <h3>Update a Record</h3>
  <pre><code>$user = User::find(1);
$user->name = 'Jane Smith';
$user->save();
</code></pre>

  <h3>Delete a Record</h3>
  <pre><code>$user = User::find(1);
$user->delete();
</code></pre>
</section>

<section>
  <h2>Advanced Query Builder</h2>
  <pre><code>use Core\Lucid\QueryBuilder;

$results = QueryBuilder::table('users')
    ->where('status', 'active')
    ->orderBy('created_at', 'desc')
    ->limit(10)
    ->get();
</code></pre>
</section>

<section>
  <h2>Relations (Coming Soon)</h2>
  <ul>
    <li><code>hasOne()</code></li>
    <li><code>hasMany()</code></li>
    <li><code>belongsTo()</code></li>
  </ul>
</section>

<section>
  <h2>CLI Commands</h2>
  <ul>
    <li><code>php lucid.php migrate</code> â€” Runs pending migrations to create/update tables.</li>
    <li><code>php lucid.php make:model ModelName</code> â€” Generates a basic model file.</li>
  </ul>
</section>

<section>
  <h2>How Lucid Works Internally</h2>
  <ul>
    <li><code>Model.php</code>: Base class with methods to manipulate data.</li>
    <li><code>QueryBuilder.php</code>: Class to fluently build SQL queries.</li>
    <li><code>Connection.php</code>: Handles PDO database connection using <code>.env</code> config.</li>
    <li><code>Schema.php</code>: Allows creating and modifying table schemas with migrations.</li>
    <li><code>Commands/</code>: CLI commands for migrations and model generation.</li>
  </ul>
</section>

<section>
  <h2>Why use Core\Lucid?</h2>
  <ul>
    <li>Clean and expressive code.</li>
    <li>Lightweight with no external dependencies.</li>
    <li>Easy to extend and integrate with any PHP project.</li>
    <li>Ideal for APIs, CLI applications, or projects seeking simplicity and power.</li>
  </ul>
</section>

<section>
  <h2>Next Steps and Improvements</h2>
  <ul>
    <li>Support for advanced relations.</li>
    <li>Query caching.</li>
    <li>Automatic validations in models.</li>
    <li>Middleware integration for hooks on events (before/after save, delete, etc.).</li>
  </ul>
</section>

<section>
  <h2>Support</h2>
  <p>If you have questions or want to contribute, open an issue or pull request in the Valeria repository.</p>
</section>

<section class="doc-section">
  <h2>ðŸ“¦ Database Connection</h2>
  <p>
    Valeria uses a singleton-based connection class to establish and reuse a single <code>PDO</code> instance throughout the application.
    The database credentials are automatically loaded from the <code>.env</code> file.
  </p>

  <pre><code class="language-php">
// /lucid/Connection.php
use Core\Lucid\Connection;

$pdo = Connection::getInstance()->getPDO();

// Example query
$users = $pdo->query("SELECT * FROM users")->fetchAll();
  </code></pre>

  <p>
    You can access the database connection from <strong>anywhere in your project</strong> by simply calling:
  </p>

  <pre><code class="language-php">
use Core\Lucid\Connection;

$pdo = Connection::getInstance()->getPDO();
  </code></pre>

  <p>
    This ensures a consistent and efficient database layer across your application.
  </p>

  <h3>ðŸ›  Environment Configuration</h3>
  <pre><code class="language-env">
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=valeria
DB_USERNAME=root
DB_PASSWORD=
DB_CHARSET=utf8mb4
  </code></pre>

  <p>
    Ensure your <code>.env</code> file is located at the root of your project. It is loaded using the <code>Core\Env</code> class.
  </p>
</section>

<p>Thanks for using Lucid ORM! Build your PHP applications with elegance and simplicity.</p>


@endsection